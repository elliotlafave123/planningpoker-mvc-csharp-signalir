@model PlanningPoker.Models.Game

@{
    ViewData["Title"] = "Game Lobby";
}

<h2>@Model.Name - Lobby</h2>

<p>Share this link with your team to join the game:</p>
<p>
    <a href="@Url.Action("JoinGame", "Home", new { gameLink = Model.GameLink }, ViewContext.HttpContext.Request.Scheme)">
        @Url.Action("JoinGame", "Home", new { gameLink = Model.GameLink }, ViewContext.HttpContext.Request.Scheme)
    </a>
</p>

<h3>Players:</h3>
<ul id="playersList">
    @foreach (var player in Model.Players)
    {
        <li>@player.Name</li>
    }
</ul>

<!-- Host Controls -->
<div id="hostControls">
    <form id="startRoundForm" style="display: none;">
        <div>
            <label>Round Name:</label>
            <input type="text" id="roundNameInput" required />
        </div>
        <button type="submit">Start Round</button>
    </form>
    <button id="endRoundButton" style="display: none;">End Round</button>
</div>

<h3>Votes:</h3>
<ul id="votesList"></ul>

<div id="votedPlayersSection">
    <h3>Players Who Have Voted:</h3>
    <ul id="votedPlayersList"></ul>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
<script>
    const gameLink = "@Model.GameLink";
    const isHost = true;

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/gamehub")
        .withAutomaticReconnect()
        .build();

    function startConnection() {
        connection.start().then(function () {
            console.log("Connected to game hub");

            connection.invoke("GetConnectionId").then(function (connectionId) {
                document.cookie = "ConnectionId=" + connectionId + "; path=/; max-age=3600";

                // Join the game as host
                connection.invoke("JoinGameAsHost", gameLink).then(function () {
                    document.getElementById("hostControls").style.display = "block";
                    document.getElementById("startRoundForm").style.display = "block";
                });
            });
        }).catch(function (err) {
            console.error(err.toString());
            setTimeout(startConnection, 5000);
        });
    }

    startConnection();

    connection.on("RoundStarted", function (roundName) {
        alert("A new round has started: " + roundName);

        document.getElementById("startRoundForm").style.display = "none";
        document.getElementById("endRoundButton").style.display = "block";

        // Clear votes and voted players list
        document.getElementById("votesList").innerHTML = "";
        document.getElementById("votedPlayersList").innerHTML = "";
    });

    connection.on("PlayerVoted", function (playerName) {
        const list = document.getElementById("votedPlayersList");
        const li = document.createElement("li");
        li.textContent = playerName;
        list.appendChild(li);
    });

    connection.on("VotesRevealed", function (votes) {
        // Hide the list of players who have voted
        document.getElementById("votedPlayersSection").style.display = "none";

        // Display votes next to player names
        const votesList = document.getElementById("votesList");
        votesList.innerHTML = "";
        votes.forEach(function (vote) {
            const li = document.createElement("li");
            li.textContent = vote.playerName + ": " + vote.card;
            votesList.appendChild(li);
        });

        // Show start round button again
        document.getElementById("startRoundForm").style.display = "block";
        document.getElementById("endRoundButton").style.display = "none";
    });

    // Handle player updates
    connection.on("UpdatePlayerList", function (players) {
        const list = document.getElementById("playersList");
        list.innerHTML = "";
        players.forEach(function (player) {
            const li = document.createElement("li");
            li.textContent = player.name;
            list.appendChild(li);
        });
    });

    // Handle host controls
    document.getElementById("startRoundForm").addEventListener("submit", function (event) {
        event.preventDefault();
        const roundName = document.getElementById("roundNameInput").value;
        connection.invoke("StartRound", gameLink, roundName).catch(function (err) {
            console.error(err.toString());
        });
    });

    document.getElementById("endRoundButton").addEventListener("click", function () {
        connection.invoke("EndRound", gameLink).catch(function (err) {
            console.error(err.toString());
        });
    });

    // Handle errors
    connection.on("Error", function (message) {
        alert("Error: " + message);
    });
</script>
